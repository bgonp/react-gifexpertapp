{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","fetch","encodeURI","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","key","GifExpertApp","index","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,OAMd,2BAAOO,MAAOR,EAAYS,SAfJ,SAACN,GACzBF,EAAcE,EAAEO,OAAOF,YCLdG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,8BAAOA,K,uBCNAK,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACN,mCADM,SAEFC,MAAM,0CAAD,OACoBC,UACxCH,GAFoB,6BADT,qCADM,cAEfI,EAFe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAZf,kBAedY,GAfc,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdpB,mBAAS,CACjC0B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAUxC,OAJAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACV,GAAD,OAAUQ,EAAS,CAAET,KAAMC,EAAMM,SAAS,SAChE,CAACb,IAEGc,EDRmBI,CAAalB,GAA/BM,EAD+B,EAC/BA,KAAMO,EADyB,EACzBA,QAEd,OACE,oCACE,4BAAKb,GACJa,GAAW,aACZ,yBAAKjB,UAAU,aACZU,EAAKE,KAAI,SAACW,GAAD,OACR,kBAAC,EAAD,eAAaC,IAAKD,EAAM1B,IAAQ0B,UER7BE,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,cADd,mBACzBQ,EADyB,KACbT,EADa,KAGhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACGS,EAAWoB,KAAI,SAACR,EAAUsB,GAAX,OACd,kBAAC,EAAD,CAASF,IAAKpB,EAAUA,SAAUA,U,MCR5CuB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.d9de348f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories])\n      setInputValue('')\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={inputValue} onChange={handleInputChange} />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <span>{title}</span>\n    </div>\n  )\n}\n","export const getGifs = async (category) => {\n  const apiKey = 'NEuo9K0rfhYMdFHcUx9BH5jobiafVZde'\n  const resp = await fetch(\n    `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n      category\n    )}&limit=10&api_key=${apiKey}`\n  )\n  const { data } = await resp.json()\n\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }))\n\n  return gifs\n}\n","import React from 'react'\nimport { GifGridItem } from './GifGridItem'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nexport const GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && 'Loading...'}\n      <div className=\"card-grid\">\n        {data.map((image) => (\n          <GifGridItem key={image.id} {...image} />\n        ))}\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(() => {\n    getGifs(category).then((gifs) => setState({ data: gifs, loading: false }))\n  }, [category])\n\n  return state\n}\n","import React, { useState } from 'react'\n\nimport { AddCategory } from './AddCategory'\nimport { GifGrid } from './GifGrid'\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch'])\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category, index) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { GifExpertApp } from './components/GifExpertApp'\n\nimport './index.css'\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'))\n"],"sourceRoot":""}